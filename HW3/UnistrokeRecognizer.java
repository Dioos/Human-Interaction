package HCI2018_HW3;

import javax.swing.*;
import HCI2018_HW3.testArrayList.Point;

import java.awt.event.*;
import java.awt.*;
import java.util.ArrayList;

public class UnistrokeRecognizer extends JFrame
{
	//用來存取Point的class
	public class Point{
		public float x;
		public float y;
		public Point(){
			x = 0;
			y = 0;
		}
	}
	    
    //宣告成員變數
    int x, y;
    //視窗中顯示的文字
    private JLabel label;
    boolean isFirst = true;
    ArrayList<Point>[] ts =new ArrayList[13];
    //用來判斷數字的一些樣本資料
    double samples[][] = {{122.26636, -9.845551
    	 ,122.061584, -17.40683
    	 ,121.73651, -25.637878
    	 ,117.7204, -37.440826
    	 ,108.62976, -53.351944
    	 ,104.0524, -59.18019
    	 ,96.36319, -69.438156
    	 ,88.2782, -80.31972
    	 ,81.831696, -87.98433
    	 ,74.58887, -95.63753
    	 ,66.31314, -102.88466
    	 ,57.677704, -109.830765
    	 ,51.405243, -114.358185
    	 ,43.956604, -117.80113
    	 ,34.67337, -122.04924
    	 ,26.4953, -123.53331
    	 ,18.198853, -125.706024
    	 ,6.869385, -127.911514
    	 ,-1.6412048, -127.84952
    	 ,-10.825043, -129.31606
    	 ,-17.794312, -129.26688
    	 ,-27.960968, -128.858
    	 ,-37.280426, -128.48317
    	 ,-45.51767, -126.315994
    	 ,-55.088715, -121.28122
    	 ,-61.22647, -115.88583
    	 ,-72.59509, -104.76459
    	 ,-80.79898, -96.10191
    	 ,-89.43678, -85.89378
    	 ,-97.85368, -73.56413
    	 ,-103.69972, -64.18739
    	 ,-111.90405, -51.52321
    	 ,-116.2995, -43.657898
    	 ,-121.718414, -32.919952
    	 ,-126.51575, -20.827423
    	 ,-127.73363, -10.86203
    	 ,-127.682755, -0.49145508
    	 ,-127.23535, 16.026703
    	 ,-124.75232, 35.17502
    	 ,-121.36134, 44.05017
    	 ,-116.61362, 55.107147
    	 ,-111.73427, 67.607574
    	 ,-105.46547, 79.584564
    	 ,-97.58452, 90.68848
    	 ,-89.47635, 99.32834
    	 ,-82.2728, 104.7619
    	 ,-72.29602, 110.44269
    	 ,-61.755768, 114.26657
    	 ,-52.352478, 116.98892
    	 ,-42.788788, 118.34177
    	 ,-32.594177, 118.96524
    	 ,-22.475494, 120.44766
    	 ,-13.867004, 120.68393
    	 ,-3.700348, 120.275055
    	 ,3.9246216, 119.96838
    	 ,12.396851, 119.627655
    	 ,20.02182, 119.320984
    	 ,26.332611, 116.40936
    	 ,33.385193, 114.54648
    	 ,44.859528, 108.69379
    	 ,57.064545, 102.04385
    	 ,65.506256, 97.05344
    	 ,74.17221, 92.31677
    	 ,81.62027, 85.82745
    	 ,87.90909, 79.767365
    	 ,92.37451, 73.95468
    	 ,98.55258, 65.22516
    	 ,101.863495, 58.39615
    	 ,105.691864, 52.343872
    	 ,109.28204, 45.532837
    	 ,113.811554, 38.303864
    	 ,118.493256, 29.720856
    	 ,121.52066, 20.572113},
    		
    	 {   -125.36703, -158.06396
    		 ,-125.213005, -157.9668
    		 ,-121.79871, -155.81592
    		 ,-118.38444, -153.66455
    		 ,-114.97015, -151.51318
    		 ,-112.92528, -149.40674
    		 ,-109.52319, -129.58447
    		 ,-105.426056, -127.00342
    		 ,-102.01445, -124.16748
    		 ,-97.93053, -103.78369
    		 ,-94.52528, -100.31885
    		 ,-88.41821, -42.299316
    		 ,-85.00392, -40.148438
    		 ,-82.95537, -38.85742
    		 ,-79.54108, -36.706543
    		 ,-76.80965, -34.98535
    		 ,-73.39537, -32.833984
    		 ,-71.3468, -31.543457
    		 ,-67.93251, -29.39209
    		 ,-64.518234, -27.24121
    		 ,-61.10396, -25.089844
    		 ,-57.006805, -22.5083
    		 ,-53.59253, -20.357422
    		 ,-50.178253, -18.206055
    		 ,-45.398254, -15.194336
    		 ,-40.618256, -12.182617
    		 ,-37.20398, -10.030762
    		 ,-32.423996, -7.0195312
    		 ,-28.326859, -4.4384766
    		 ,-22.863998, -0.99658203
    		 ,-18.084015, 2.0151367
    		 ,-14.669708, 4.166504
    		 ,-9.889709, 7.178711
    		 ,-5.7926025, 9.759766
    		 ,-1.0125885, 12.771973
    		 ,2.401703, 14.922852
    		 ,7.8645325, 18.364258
    		 ,12.6445465, 21.376465
    		 ,18.790253, 25.248535
    		 ,24.935944, 29.121094
    		 ,29.715942, 32.132324
    		 ,35.178802, 35.574707
    		 ,42.007355, 39.876953
    		 ,46.787354, 42.88867
    		 ,51.567352, 45.90039
    		 ,59.078766, 50.632812
    		 ,64.541626, 54.074707
    		 ,70.68732, 57.946777
    		 ,76.15018, 61.38867
    		 ,80.930176, 64.40039
    		 ,87.07587, 68.27246
    		 ,93.22159, 72.14502
    		 ,96.635864, 74.2959
    		 ,100.05014, 76.447266
    		 ,103.46442, 78.59912
    		 ,107.561584, 81.17969
    		 ,109.61017, 82.47119
    		 ,113.707306, 85.052734
    		 ,114.39017, 85.48242
    		 ,117.12158, 87.20361
    		 ,119.170166, 88.49414
    		 ,119.85297, 88.924805
    		 ,120.53586, 89.35498
    		 ,122.58441, 90.64502
    		 ,123.2673, 91.07568
    		 ,124.632996, 91.936035},
      
        {-110.80444, 23.41278
    			 ,-111.786316, 17.911499
    			 ,-113.80878, 6.5803223
    			 ,-115.25336, -1.5133057
    			 ,-117.27576, -12.844482
    			 ,-119.29834, -24.175598
    			 ,-120.30945, -38.775574
    			 ,-116.541016, -53.39972
    			 ,-111.99896, -65.982544
    			 ,-108.13245, -79.002045
    			 ,-101.20178, -91.05878
    			 ,-93.88489, -101.42285
    			 ,-86.167175, -110.05325
    			 ,-78.53534, -113.600555
    			 ,-66.89099, -118.839355
    			 ,-57.772827, -120.576416
    			 ,-47.154114, -121.67755
    			 ,-32.287964, -123.219055
    			 ,-17.421753, -124.76053
    			 ,1.451294, -124.39896
    			 ,26.174683, -118.53195
    			 ,43.725647, -112.822876
    			 ,64.56268, -103.11368
    			 ,91.06134, -89.64325
    			 ,99.28943, -81.966064
    			 ,107.25122, -70.02643
    			 ,112.23175, -60.059143
    			 ,113.67633, -51.965454
    			 ,115.12097, -43.871826
    			 ,116.11279, -32.490173
    			 ,115.453064, -20.957947
    			 ,111.42029, -6.419861
    			 ,102.04443, 7.1782227
    			 ,86.93085, 23.085571
    			 ,71.3988, 35.760498
    			 ,51.793945, 48.944336
    			 ,28.38739, 62.9718
    			 ,8.701294, 74.70557
    			 ,-12.154541, 87.51727
    			 ,-29.612122, 100.536316
    			 ,-41.198853, 108.33258
    			 ,-52.785522, 116.128845
    			 ,-64.9469, 122.79321
    			 ,-59.322144, 125.23944
    			 ,-44.455933, 123.69794
    			 ,-33.83728, 122.59686
    			 ,-10.476196, 120.17444
    			 ,6.513794, 118.41272
    			 ,31.998657, 115.77008
    			 ,53.236023, 113.56793
    			 ,72.34961, 111.58594
    			 ,91.46326, 109.604004
    			 ,106.32947, 108.06244
    			 ,116.94812, 106.961365
    			 ,129.69055, 105.640076},
        
          { 23.512909, -144.50569
    				 ,27.964844, -143.94064
    				 ,39.16342, -140.59491
    				 ,45.43576, -136.46397
    				 ,48.808685, -133.16628
    				 ,55.154938, -128.36517
    				 ,63.533325, -123.783966
    				 ,67.638824, -120.85428
    				 ,74.17459, -115.82883
    				 ,77.817505, -112.96777
    				 ,83.57544, -105.467865
    				 ,88.51346, -99.03595
    				 ,92.04062, -94.44171
    				 ,96.97867, -88.009766
    				 ,102.272156, -79.02054
    				 ,103.713135, -70.62457
    				 ,104.34558, -61.30847
    				 ,105.17157, -50.060394
    				 ,104.78912, -40.716095
    				 ,103.05774, -32.55374
    				 ,97.15216, -24.348267
    				 ,90.80069, -15.745361
    				 ,85.93506, -10.780487
    				 ,80.042725, -5.3902893
    				 ,74.992065, -0.7701111
    				 ,69.09973, 4.620056
    				 ,63.314453, 7.892029
    				 ,56.553375, 9.255493
    				 ,47.13388, 10.051453
    				 ,37.718323, 10.039734
    				 ,28.78894, 7.6263733
    				 ,21.81366, 5.102661
    				 ,9.378418, 0.0095825195
    				 ,2.9784546, -2.7757263
    				 ,-8.38205, -6.5627136
    				 ,-17.920898, -10.864258
    				 ,-23.131622, -13.9184265
    				 ,-28.504852, -16.606354
    				 ,-29.844177, -16.160767
    				 ,-26.150482, -11.349609
    				 ,-21.917877, -5.8365173
    				 ,-15.5381775, 6.2555847
    				 ,-12.486206, 15.167694
    				 ,-10.576355, 22.05072
    				 ,-9.311005, 31.611115
    				 ,-9.88147, 44.264984
    				 ,-12.130585, 54.316742
    				 ,-16.562042, 66.23193
    				 ,-19.973358, 72.83328
    				 ,-24.08731, 77.352295
    				 ,-31.663208, 84.28259
    				 ,-35.87204, 88.13269
    				 ,-41.764404, 93.52289
    				 ,-49.34027, 100.453125
    				 ,-55.967316, 104.49515
    				 ,-62.74173, 105.49432
    				 ,-71.23135, 104.54083
    				 ,-78.19641, 103.56271
    				 ,-82.79465, 102.74341
    				 ,-92.31018, 99.41788
    				 ,-97.28378, 95.93561
    				 ,-103.5289, 90.51779
    				 ,-109.79083, 85.56058
    				 ,-118.47348, 79.28873
    				 ,-125.05261, 72.60315
    				 ,-128.57977, 68.00888
    				 ,-134.2232, 60.658142
    				 ,-139.65219, 51.7377
    				 ,-141.63214, 47.292328
    				 ,-142.03732, 42.38217
    				 ,-144.82846, 37.512207},
          { -186.49185, -24.749023
    					 ,-182.6352, -24.494202
    					 ,-177.76645, -22.20929
    					 ,-168.383, -16.139252
    					 ,-157.85065, -9.606079
    					 ,-148.46713, -3.5360107
    					 ,-140.64224, 1.4799805
    					 ,-126.96332, 9.900452
    					 ,-118.26373, 14.639374
    					 ,-105.86182, 24.258087
    					 ,-91.510284, 31.622192
    					 ,-76.41528, 41.22989
    					 ,-64.530365, 45.63681
    					 ,-47.333954, 55.502014
    					 ,-35.07257, 62.69638
    					 ,-23.119934, 68.074615
    					 ,-10.942383, 74.16708
    					 ,0.92529297, 79.70236
    					 ,11.45752, 86.23544
    					 ,21.184143, 91.51828
    					 ,26.252747, 94.074005
    					 ,31.5755, 97.24753
    					 ,42.290466, 103.43497
    					 ,50.478943, 106.331085
    					 ,53.671265, 107.94943
    					 ,55.189514, 105.77939
    					 ,55.634216, 98.7543
    					 ,55.954346, 86.10788
    					 ,55.770935, 74.77792
    					 ,56.304504, 66.34775
    					 ,57.371704, 49.487457
    					 ,58.438904, 32.627167
    					 ,59.861877, 10.1466675
    					 ,61.017944, -8.118652
    					 ,62.085205, -24.979004
    					 ,62.974487, -39.029297
    					 ,63.508118, -47.459442
    					 ,63.00995, -54.42871
    					 ,62.93335, -60.195557
    					 ,62.346252, -65.75983
    					 ,61.916138, -71.49176
    					 ,60.230835, -82.94861
    					 ,59.354248, -88.44705
    					 ,59.47827, -92.87463
    					 ,60.10077, -102.70984
    					 ,60.63434, -111.139984
    					 ,60.901184, -115.35507
    					 ,61.256897, -120.97519
    					 ,61.52368, -125.19028
    					 ,61.879395, -130.81036
    					 ,62.14624, -135.02545
    					 ,62.59088, -142.0506},
          {-25.031097, -128.05624
    						 ,-28.838715, -124.08443
    						 ,-36.151093, -116.45668
    						 ,-40.804382, -111.602646
    						 ,-45.457733, -106.74863
    						 ,-50.775787, -101.20119
    						 ,-58.088165, -93.573425
    						 ,-65.40051, -85.94568
    						 ,-73.377625, -77.62448
    						 ,-82.684235, -67.91646
    						 ,-91.990875, -58.208405
    						 ,-99.96805, -49.887207
    						 ,-106.6156, -42.95291
    						 ,-114.59274, -34.631744
    						 ,-122.569855, -26.310547
    						 ,-127.85498, -22.20465
    						 ,-126.8862, -16.786774
    						 ,-122.88992, -7.20401
    						 ,-113.46634, 2.8716736
    						 ,-107.60803, 10.816193
    						 ,-99.978546, 21.167603
    						 ,-93.08353, 28.366577
    						 ,-82.87125, 37.38571
    						 ,-77.04758, 43.78421
    						 ,-71.00876, 48.983185
    						 ,-66.276306, 52.489777
    						 ,-59.391846, 55.54178
    						 ,-55.979248, 51.050995
    						 ,-52.325806, 45.491516
    						 ,-49.96292, 40.342957
    						 ,-45.399475, 32.77008
    						 ,-40.857727, 27.765076
    						 ,-34.210114, 20.83078
    						 ,-26.897736, 13.203033
    						 ,-18.920654, 4.8818054
    						 ,-10.943512, -3.4393616
    						 ,-4.295929, -10.373657
    						 ,4.345978, -19.388306
    						 ,14.459625, -26.763092
    						 ,21.240631, -30.24121
    						 ,32.37271, -36.2247
    						 ,38.738342, -37.291748
    						 ,49.360443, -39.557343
    						 ,58.742584, -39.37091
    						 ,65.46933, -37.94461
    						 ,71.942444, -35.816406
    						 ,80.781555, -32.15039
    						 ,88.88422, -27.795105
    						 ,97.22702, -24.197388
    						 ,105.34778, -19.590027
    						 ,110.08026, -16.083435
    						 ,115.60144, -11.992401
    						 ,119.54877, -8.013306
    						 ,122.14502, 0.5824585
    						 ,122.11774, 8.9444275
    						 ,120.352234, 17.828033
    						 ,115.976685, 28.986847
    						 ,111.85681, 38.040527
    						 ,106.910645, 47.42157
    						 ,101.60162, 56.641174
    						 ,96.60266, 64.77823
    						 ,88.631134, 75.62631
    						 ,80.65402, 83.94751
    						 ,72.67688, 92.26868
    						 ,64.69977, 100.589874
    						 ,59.381714, 106.13733
    						 ,54.728363, 110.99133
    						 ,50.739807, 115.15195
    						 ,46.086487, 120.00595
    						 ,41.19873, 121.943756},
          { -153.89673, -122.66281
    							 ,-154.56154, -113.897095
    							 ,-150.6402, -93.74997
    							 ,-146.74377, -79.96301
    							 ,-142.93394, -67.12607
    							 ,-138.20894, -51.78424
    							 ,-131.40376, -32.70694
    							 ,-124.581665, -18.577759
    							 ,-117.59694, -3.225525
    							 ,-108.40909, 16.474182
    							 ,-99.871796, 29.833374
    							 ,-90.548584, 43.51776
    							 ,-80.61856, 57.92578
    							 ,-71.64273, 72.30023
    							 ,-62.85907, 82.315186
    							 ,-51.644043, 91.46735
    							 ,-43.176453, 99.40906
    							 ,-32.53125, 108.20947
    							 ,-23.01123, 114.055725
    							 ,-12.577484, 118.02142
    							 ,-2.9463806, 121.68207
    							 ,6.6847534, 125.34277
    							 ,15.466766, 124.58002
    							 ,26.28244, 121.3692
    							 ,38.012268, 118.02026
    							 ,47.550964, 111.40515
    							 ,56.911713, 102.94983
    							 ,68.38388, 92.83984
    							 ,74.7659, 84.08826
    							 ,80.01358, 74.02594
    							 ,83.74298, 64.40015
    							 ,88.272095, 49.465027
    							 ,90.38049, 36.693054
    							 ,92.10675, 22.510254
    							 ,93.66043, 9.745728
    							 ,95.412445, -10.282471
    							 ,95.43848, -32.1409
    							 ,93.746216, -50.21747
    							 ,90.70706, -70.25812
    							 ,86.27496, -88.72983
    							 ,82.08319, -102.25543
    							 ,77.76666, -113.19162
    							 ,72.35495, -118.88022
    							 ,65.10376, -122.52185
    							 ,59.485626, -124.65726
    							 ,51.40088, -124.51065
    							 ,44.98764, -119.8461
    							 ,39.30893, -114.58502
    							 ,34.484467, -107.24005
    							 ,30.238312, -99.95059
    							 ,26.798431, -91.47052
    							 ,21.813446, -78.63141
    							 ,15.852814, -62.053467
    							 ,13.21283, -51.51764
    							 ,9.884186, -39.842163
    							 ,7.43631, -26.947021
    							 ,5.056946, -17.737793
    							 ,1.9203186, -7.1379395
    							 ,0.4281311, 3.0350342
    							 ,-1.6435242, 14.026611
    							 ,-3.7522278, 23.581726
    							 ,-7.534363, 40.856995
    							 ,-8.651611, 50.036316
    							 ,-9.860016, 59.964294
    							 ,-11.586304, 74.147095},
          { -121.107544, -110.207565
    								 ,-116.5791, -108.83316
    								 ,-108.14148, -106.27232
    								 ,-99.7038, -103.71147
    								 ,-84.51611, -99.10196
    								 ,-64.26575, -92.9559
    								 ,-44.01538, -86.809875
    								 ,-22.077576, -80.15166
    								 ,6.6104736, -71.44479
    								 ,30.23584, -64.2744
    								 ,53.861145, -57.104034
    								 ,70.73651, -51.98233
    								 ,84.83063, -48.70871
    								 ,96.85309, -47.294373
    								 ,110.06964, -44.77716
    								 ,115.13214, -43.24066
    								 ,122.54462, -42.5484
    								 ,128.8924, -41.430664
    								 ,126.81354, -38.88672
    								 ,120.97101, -33.561096
    								 ,116.102356, -29.123077
    								 ,108.51813, -23.194153
    								 ,94.88385, -14.274567
    								 ,79.04242, -2.572113
    								 ,66.48981, 5.505005
    								 ,48.201843, 18.727966
    								 ,30.489014, 27.684814
    								 ,12.805908, 40.0867
    								 ,-5.2043457, 53.462067
    								 ,-21.369385, 62.83264
    								 ,-32.723755, 71.22275
    								 ,-46.38739, 81.2475
    								 ,-61.763, 91.99866
    								 ,-73.448, 102.6499
    								 ,-81.237976, 109.7507
    								 ,-88.974304, 115.60907
    								 ,-100.193054, 122.92801
    								 ,-107.00928, 129.14124
    								 ,-111.87799, 133.57922
    								 ,-114.799255, 136.24207
    								 ,-118.694275, 139.79245},
          { -112.31291, -86.724
    									 ,-113.46506, -75.98712
    									 ,-114.685455, -64.613464
    									 ,-115.9059, -53.23993
    									 ,-118.14105, -42.422546
    									 ,-122.33498, -25.642944
    									 ,-123.76109, -13.916016
    									 ,-125.330185, 0.70721436
    									 ,-126.72499, 13.705627
    									 ,-127.945404, 25.079224
    									 ,-128.43837, 39.305725
    									 ,-124.04808, 49.148804
    									 ,-115.76239, 52.22058
    									 ,-108.76924, 54.81305
    									 ,-102.54541, 55.541565
    									 ,-96.28906, 54.21997
    									 ,-88.00769, 51.132385
    									 ,-77.52826, 46.511536
    									 ,-65.09946, 41.12677
    									 ,-56.453888, 38.353394
    									 ,-43.489746, 33.47455
    									 ,-29.985626, 26.969055
    									 ,-17.85794, 19.814209
    									 ,-6.354553, 9.287598
    									 ,4.26178, -1.0021973
    									 ,17.422638, -15.169128
    									 ,26.893433, -30.780334
    									 ,37.24774, -48.53778
    									 ,45.02954, -60.686035
    									 ,53.704224, -77.57678
    									 ,60.167328, -93.58667
    									 ,65.73987, -104.13541
    									 ,71.20001, -113.943085
    									 ,77.3551, -112.70755
    									 ,83.35895, -107.36606
    									 ,89.357544, -96.07843
    									 ,95.499084, -83.51074
    									 ,100.524506, -71.42499
    									 ,105.97858, -57.034363
    									 ,111.85898, -41.81598
    									 ,116.864044, -24.394897
    									 ,119.5101, -9.564697
    									 ,121.561615, 10.713379
    									 ,120.45822, 22.559875
    									 ,118.71478, 38.807922
    									 ,116.62268, 58.305603
    									 ,113.28598, 71.70068
    									 ,106.57846, 88.36322
    									 ,100.26837, 98.648865
    									 ,94.53549, 105.97778
    									 ,89.60919, 113.28107
    									 ,83.13107, 117.04877
    									 ,76.32449, 118.703125
    									 ,66.218414, 116.306335
    									 ,57.47702, 113.065674
    									 ,49.60977, 110.14911
    									 ,43.997467, 105.13104
    									 ,35.285736, 95.47662
    									 ,26.037354, 82.54883
    									 ,17.176666, 69.93909
    									 ,10.887512, 58.685486
    									 ,5.28183, 45.817627
    									 ,-1.157135, 32.96228
    									 ,-8.567322, 16.488647
    									 ,-15.386505, -0.3242798
    									 ,-22.212128, -17.290283
    									 ,-29.170258, -33.87903
    									 ,-34.823456, -46.678467
    									 ,-38.804504, -59.956726
    									 ,-42.356018, -75.14667
    									 ,-45.269745, -85.79205
    									 ,-51.570038, -103.27026
    									 ,-57.110382, -114.479095
    									 ,-61.94861, -122.11481
    									 ,-65.42261, -131.29688},
          { -73.64612, -111.45581
    										 ,-77.68231, -108.918274
    										 ,-81.65848, -104.15375
    										 ,-85.45346, -94.62326
    										 ,-88.300476, -84.48526
    										 ,-90.56604, -70.20694
    										 ,-93.3551, -52.629578
    										 ,-94.179596, -41.93463
    										 ,-92.35068, -24.415283
    										 ,-89.42355, -12.65332
    										 ,-85.392395, -0.8574219
    										 ,-79.19446, 17.71576
    										 ,-74.131775, 31.07013
    										 ,-64.91171, 50.65692
    										 ,-54.756042, 70.61536
    										 ,-43.989594, 87.74719
    										 ,-32.751617, 100.50604
    										 ,-21.431335, 112.272766
    										 ,-11.475739, 121.26929
    										 ,-5.5127563, 125.29779
    										 ,1.1818237, 124.30817
    										 ,3.7578125, 108.07355
    										 ,6.2679443, 92.25391
    										 ,8.135742, 77.98059
    										 ,9.661926, 56.059814
    										 ,9.132385, 31.007202
    										 ,7.5263367, 10.598267
    										 ,4.5952454, -15.974487
    										 ,0.92666626, -39.964233
    										 ,-3.9043884, -59.683685
    										 ,-10.314697, -76.67227
    										 ,-16.40097, -93.57913
    										 ,-22.392944, -105.79352
    										 ,-26.259644, -111.75403
    										 ,-30.466003, -119.5426
    										 ,-35.63922, -124.70221
    										 ,-28.900513, -119.74179
    										 ,-21.828644, -111.35901
    										 ,-11.074371, -97.00427
    										 ,-0.2079773, -81.183105
    										 ,10.776672, -67.50052
    										 ,28.702301, -43.738342
    										 ,53.103577, -12.648865
    										 ,74.18222, 9.152039
    										 ,92.88394, 27.887756
    										 ,107.951324, 45.076965
    										 ,119.19498, 58.504272
    										 ,130.1113, 67.06879
    										 ,135.5198, 73.43262
    										 ,140.81415, 81.15851
    										 ,145.99405, 90.26459
    										 ,149.36868, 98.96631
    										 ,151.93942, 106.541504
    										 ,155.8204, 111.683716},
          {      33.646667, -97.54942
    											 ,33.191284, -97.699905
    											 ,28.33374, -99.231964
    											 ,24.091614, -100.03294
    											 ,17.814392, -101.77516
    											 ,11.313141, -102.09439
    											 ,3.1471863, -101.31944
    											 ,-4.169342, -100.997055
    											 ,-15.643829, -97.74162
    											 ,-26.551392, -93.69916
    											 ,-38.801147, -89.739044
    											 ,-47.138855, -83.770355
    											 ,-61.57257, -75.78845
    											 ,-72.37094, -67.96173
    											 ,-83.99991, -59.53296
    											 ,-95.62894, -51.104156
    											 ,-106.406555, -43.249634
    											 ,-117.35324, -33.87906
    											 ,-126.06262, -21.206055
    											 ,-134.47372, -9.946564
    											 ,-141.42957, 1.5746155
    											 ,-147.7399, 17.678375
    											 ,-150.79504, 27.620056
    											 ,-153.16043, 42.161804
    											 ,-153.41891, 52.5856
    											 ,-153.00824, 63.84497
    											 ,-150.77048, 72.453186
    											 ,-147.30981, 82.73804
    											 ,-142.80945, 90.97418
    											 ,-136.93591, 99.488525
    											 ,-128.71295, 111.40863
    											 ,-121.58902, 121.55762
    											 ,-110.80435, 131.57083
    											 ,-96.74588, 139.23083
    											 ,-84.446106, 144.30225
    											 ,-69.668, 147.564
    											 ,-58.112732, 147.90561
    											 ,-46.416718, 143.16388
    											 ,-35.88324, 136.75638
    											 ,-22.592957, 127.123505
    											 ,-10.133301, 118.09268
    											 ,5.6488647, 106.653625
    											 ,18.939117, 97.02072
    											 ,32.133575, 87.28473
    											 ,38.74713, 78.77786
    											 ,47.254272, 71.25879
    											 ,53.591644, 64.17508
    											 ,60.40558, 57.83548
    											 ,68.08829, 47.263428
    											 ,73.212555, 42.11319
    											 ,78.37741, 33.315033
    											 ,84.19852, 25.454315
    											 ,88.87259, 21.641754
    											 ,90.15549, 16.028015
    											 ,93.25925, 13.445221
    											 ,94.485504, 9.910553
    											 ,95.21536, 5.550049
    											 ,95.94528, 1.1895752
    											 ,96.581085, -3.1777344
    											 ,96.50687, -6.936157
    											 ,96.497406, -12.127258
    											 ,95.63217, -15.29895
    											 ,94.56094, -22.205902
    											 ,93.30307, -27.671173
    											 ,91.3118, -37.73575
    											 ,89.15402, -46.3638
    											 ,88.60611, -48.58441
    											 ,88.01871, -49.43582
    											 ,87.56906, -50.356262
    											 ,86.49991, -53.443634
    											 ,85.91257, -54.295074
    											 ,84.737885, -55.997955
    											 ,82.38846, -59.403687
    											 ,81.213776, -61.106552
    											 ,78.27701, -65.36372
    											 ,74.70041, -70.42827
    											 ,69.750305, -75.77832
    											 ,65.34662, -80.22679
    											 ,57.59973, -86.12268
    											 ,50.65918, -92.589096
    											 ,46.817474, -96.138626
    											 ,40.94699, -99.609985},
          {  126.76926, -118.241425
    												 ,126.93448, -118.31262
    												 ,122.47101, -116.443665
    												 ,118.2543, -113.162415
    												 ,115.84204, -110.58316
    												 ,110.732666, -106.925995
    												 ,108.31415, -104.36575
    												 ,101.670044, -98.543274
    												 ,97.728485, -93.792145
    												 ,92.61911, -90.13501
    												 ,87.79117, -84.97153
    												 ,81.5123, -82.40872
    												 ,77.838104, -76.22046
    												 ,70.066315, -71.39285
    												 ,60.774933, -64.344086
    												 ,54.518097, -61.741302
    												 ,43.300903, -49.353912
    												 ,34.645294, -44.1185
    												 ,22.399292, -37.43347
    												 ,11.412689, -23.701813
    												 ,-1.3486938, -9.187073
    												 ,-14.614319, 2.5108032
    												 ,-26.106384, 13.426422
    												 ,-37.972504, 27.57016
    												 ,-49.7247, 37.061157
    												 ,-60.460236, 52.194733
    												 ,-70.81717, 64.121185
    												 ,-80.02388, 77.08316
    												 ,-88.5827, 88.27661
    												 ,-94.97998, 95.49939
    												 ,-99.59195, 101.96588
    												 ,-104.83569, 110.22937
    												 ,-107.89104, 114.57745
    												 ,-110.331375, 117.09027
    												 ,-113.40166, 121.40845
    												 ,-117.99216, 127.91565
    												 ,-120.3947, 130.53644
    												 ,-121.28496, 130.92004
    												 ,-122.17523, 131.30371
    												 ,-123.065506, 131.68738},
          {24.715698, -122.98146
    													 ,25.170929, -122.67409
    													 ,34.5419, -116.359726
    													 ,45.773865, -109.00354
    													 ,55.01822, -101.25537
    													 ,69.90637, -90.49359
    													 ,80.90018, -80.29625
    													 ,93.223114, -69.961716
    													 ,107.50485, -59.982635
    													 ,116.5213, -50.674103
    													 ,123.716156, -41.19409
    													 ,128.67065, -38.83203
    													 ,132.0741, -33.88803
    													 ,133.2409, -29.992584
    													 ,132.24551, -27.964783
    													 ,129.19705, -23.884521
    													 ,124.51108, -17.069275
    													 ,119.02319, -9.685547
    													 ,111.71524, -3.1828613
    													 ,104.3811, 3.2801514
    													 ,94.99921, 10.223053
    													 ,85.72696, 15.523682
    													 ,75.64111, 16.55545
    													 ,66.13107, 18.316193
    													 ,53.9924, 19.660614
    													 ,40.829742, 18.029633
    													 ,21.817413, 14.934784
    													 ,6.1776733, 11.481567
    													 ,-14.454834, 4.533966
    													 ,-34.50418, -1.5885315
    													 ,-52.052185, -5.986786
    													 ,-67.56322, -10.829651
    													 ,-81.17398, -14.689056
    													 ,-94.19797, -17.73767
    													 ,-105.31128, -19.613983
    													 ,-113.51033, -17.72992
    													 ,-116.759125, -17.08368
    													 ,-116.74094, -16.341766
    													 ,-116.15523, -15.530426
    													 ,-115.56955, -14.719055
    													 ,-114.39812, -13.0963745
    													 ,-113.81239, -12.285034
    													 ,-112.52663, -10.80304
    													 ,-110.06221, -8.982056
    													 ,-106.96512, -6.4241333
    													 ,-104.461, -4.670105
    													 ,-100.20145, -1.7434998
    													 ,-94.87074, 5.4969788
    													 ,-85.854324, 14.805542
    													 ,-77.654434, 26.164337
    													 ,-68.868835, 38.334503
    													 ,-57.740433, 53.75006
    													 ,-46.612, 69.16559
    													 ,-37.240707, 82.147095
    													 ,-27.869415, 95.1286
    													 ,-20.211365, 105.632355
    													 ,-14.253082, 112.32791
    													 ,-8.92627, 119.57303
    													 ,-4.151001, 124.65915
    													 ,-2.7832031, 125.88504
    													 ,-0.34658813, 126.60397
    													 ,0.43548584, 127.018555}};
    ArrayList<Point> list;
    int k , l;
    int count = -1;
    
    
    //main函式
    public static void main(String args[])
    {
	    new UnistrokeRecognizer();
    }
    
    
    
    public UnistrokeRecognizer()
    {    	
       super("$1 Unistroke Recognizer");
       
       for(int i=0; i<13;i++) {
    	  ts[i] = new ArrayList<Point>(); 
    	  int j = 0;
   	      for(double k:samples[i]) {
   	    	 if(j%2 == 0) { 
   	    		 Point p = new Point();
   	    		 p.x = (float)samples[i][j];
   	    		 p.y = (float)samples[i][j+1];
   	    		 ts[i].add(p);
   	    	 }
   	    	 j++;
   	      }
       }
              
       Container c = getContentPane();
       c.setLayout(new FlowLayout());
       label = new JLabel();
       c.add(label);
       addWindowListener(new MyListener());
       addMouseMotionListener(new MouseMotion());
       setBackground(Color.GRAY);
       setSize(800,600);
       setVisible(true);
    }
   
    //////////////////////  STEP1 ////////////////////////////////////////////////////
    
    
    //重新sample點的數量
    ArrayList<Point> resample(ArrayList<Point> input , int pointNum ,int resampleNum) {
    	ArrayList<Point> newPoints = new ArrayList<Point>();
    	float averageLength = pathLength(input , pointNum) / resampleNum-1;   // 若將原來的input改取成n點(n-1段)，則一段平均該多長
    	newPoints.add(input.get(0));
    	float tempLength = 0;
    	for(int i=1; i<pointNum ; i++) {
    		Point aPoint = new Point();
    		float d = distance(input.get(i) , input.get(i-1));
    		if(tempLength + d >= averageLength) {
    			aPoint.x = input.get(i-1).x + ((averageLength - tempLength) / d) * (input.get(i).x - input.get(i-1).x);
    			aPoint.y = input.get(i-1).y + ((averageLength - tempLength) / d) * (input.get(i).y - input.get(i-1).y);
    			newPoints.add(aPoint);
    			tempLength = 0;
    		}else {
    			tempLength += d;
    		}
    	} 	
    	return newPoints;
    }
    
    //計算input的這些點所連成的總長度
    float pathLength(ArrayList<Point> input , int n) { 	
    	float totalDistance = 0;
    	for(int i=1; i<n ; i++) {
    		totalDistance += distance(input.get(i),input.get(i-1));
    	}
    	return totalDistance;
    }   
    
    //計算兩點的距離
    float distance(Point p1 , Point p2) {
    	float d = 0;
    	d =(float) Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
    	return d;
    }
    
    //////////////////////  STEP2 ////////////////////////////////////////////////////
    
    //使用arcTan來算出Input的第一點和整個input的質心兩者之間和X軸的夾角
    double indicativeAngle(ArrayList<Point> input , int n) {
    	Point c = certroid(input,n);
    	return Math.atan( (double) ((c.y - input.get(0).y)/ (c.x - input.get(0).x )) );
    }
    
    
    //算出質心的X,Y座標
    Point certroid(ArrayList<Point> input , int n) {
    	Point p  = new Point();
    	float x = 0, y = 0;
    	for(int i=0; i<n ;i++) {
    		x += input.get(i).x;
    		y += input.get(i).y;
    	}
    	p.x = x/n;
    	p.y = y/n;
    	
    	return p;
    }
    
    //依據Input的第一點和整個input的質心兩者之間和X軸的夾角，來對整個Input中的點進行旋轉
    ArrayList<Point> rotateBy(ArrayList<Point> input , int n){ 	
    	ArrayList<Point> newPoints = new ArrayList<Point>();
    	Point c = certroid(input,n);
    	double w = indicativeAngle(input , n);
    	for(int i=0; i<n ; i++) {
    	   Point aPoint = new Point();
    	   aPoint.x = (float) ((input.get(i).x - c.x) * Math.cos(w) - (input.get(i).y - c.y) * Math.sin(w) + c.x);
    	   aPoint.y = (float) ((input.get(i).x - c.x) * Math.sin(w) + (input.get(i).y - c.y) * Math.cos(w) + c.y);
    	   newPoints.add(aPoint);
    	}   	
    	
    	return newPoints;
    }
    
  
   ////////////////////////STEP3////////////////////////////////////////////////////////
    
    //將Input縮放到一個size X size的格子當中(這裡size = 250)
    ArrayList<Point> scaleTo(ArrayList<Point> input , int n , int size){
    	float minX = 0 , minY = 0 , maxX = 0, maxY = 0;
    	for(int i=0; i<n ; i++) {
    	     if(i == 0) {
    	    	 minX = input.get(i).x;
    	    	 maxX = input.get(i).x;
    	    	 minY = input.get(i).y;
    	    	 maxY = input.get(i).y;
    	    	 continue;
    	     }
    	     if(input.get(i).x < minX){
    	    	 minX = input.get(i).x;
    	     }
    	     if(input.get(i).x > maxX){
    	    	 maxX = input.get(i).x;
    	     }
    	     if(input.get(i).y < minY){
    	    	 minY = input.get(i).y;
    	     }
    	     if(input.get(i).y > maxY){
    	    	 maxY = input.get(i).y;
    	     }    	
    	}
    	ArrayList<Point> newPoints = new ArrayList<Point>();
    	for(int i=0; i<n ; i++) {
    		Point aPoint = new Point();
    		aPoint.x = input.get(i).x * size / (maxX - minX);
    		aPoint.y = input.get(i).y * size / (maxY - minY);
    		newPoints.add(aPoint);
    	}
    	    	
    	return newPoints;
    }
    
    
    //依據將Input的質心移動到原點(即(0,0))為基準，來對整個Input中的點進行位移
    ArrayList<Point> translateTo(ArrayList<Point> input , int n){
    	ArrayList<Point> newPoints = new ArrayList<Point>();
    	
    	Point c = certroid(input,n);
    	for(int i=0; i<n ; i++) {
    		Point aPoint = new Point();
    		aPoint.x = input.get(i).x  - c.x;    //將質心移到(0,0)
     	    aPoint.y = input.get(i).y  - c.y;
    		newPoints.add(aPoint);
    	}
    	return newPoints;
    	
    }
    
    /////////////////////STEP4/////////////////////////////////////////////////
    
    //讓Input的點去和是先加入進去的0~9的樣本進行比對，看和哪一個最像
    int recognize(ArrayList<Point> input , ArrayList<Point>[] templates, int n) {
    	double b = 999999999;
    	int finalIndex = 0;
    	int count = 0;
    	for(ArrayList<Point> t: templates) {
    		double d = distanceAtBestAngle(input , n ,t , 45 , -45 , 2);
    		
    		if(d < b) {    			
    			b = d;
    			finalIndex = count;
    		}
    		count++;
    	}
    	double score = 1 - b / 0.5 * Math.sqrt(250 * 250 * 2);
    	return finalIndex % 10;
    }
    
    //因為Input可能會和樣本有所偏差，所以稍微轉一下Input的點來進行比對
    double distanceAtBestAngle(ArrayList<Point> input ,int n ,ArrayList<Point> template, double angleA , double angleB , double angleD) {
    	double r = (-1 + Math.sqrt(5)) / 2.0 ;
    	double x1 = r*angleA + (1-r)*angleA ;
    	double f1 = Math.toDegrees(distanceAtAngle(input ,n ,template , Math.toRadians(x1)));
    	double x2 = (1-r)*angleA + (r)*angleA;
    	double f2 = Math.toDegrees(distanceAtAngle(input ,n ,template , Math.toRadians(x2)));
    	while(Math.abs(angleA - angleB)  > angleD ) {
    		if(f1 < f2) {
    			angleB = x2;
    			x2 = x1;
    			f2 = f1;
    			x1 = r*angleA + (1-r)*angleB;
    			f1 = Math.toDegrees(distanceAtAngle(input ,n ,template , Math.toRadians(x1)));
    		}else {
    			angleA = x1;
    			x1 = x2;
    			f1 = f2;
    			x2 = (1-r)*angleA + (r)*angleB;
    			f2 = Math.toDegrees(distanceAtAngle(input ,n ,template , Math.toRadians(x2)));
    		}
    	}
    	if(f1 < f2) return f1;
    	else return f2;
    }
    
    //將input旋轉並將Input和樣本比對，回傳和樣本的距離
    double distanceAtAngle(ArrayList<Point> input , int n, ArrayList<Point> template , double angle) {
    	ArrayList<Point> newPoints = rotateByAngel(input , n , angle);
    	double d = pathDistance(newPoints ,n , template);
    	return d;
    }
    
    //計算Input和該數字的樣本上的點，實際差了多少距離(差的距離越小，代表兩圖形越相近)
    double pathDistance(ArrayList<Point> a ,int n, ArrayList<Point> b) {
    	double d = 0;
    	float k = (float)b.size() /(float) n;
    	float total = 0;
    	int i = 0;
    	while((int)total < b.size() && i < n) {
    		d += distance(a.get(i), b.get((int)total));
    		i++;
    		total += k;
    	}
    	return d;
    }

    //依據給的角度，來將Input的點進行旋轉
    ArrayList<Point> rotateByAngel(ArrayList<Point> input , int n , double w){   	
    	ArrayList<Point> newPoints = new ArrayList<Point>();
    	Point c = certroid(input,n);
    	for(int i=0; i<n ; i++) {
    	   Point aPoint = new Point();
    	   aPoint.x = (float) ((input.get(i).x - c.x) * Math.cos(w) - (input.get(i).y - c.y) * Math.sin(w) + c.x);
    	   aPoint.y = (float) ((input.get(i).x - c.x) * Math.sin(w) + (input.get(i).y - c.y) * Math.cos(w) + c.y);
    	   newPoints.add(aPoint);
    	}   	    	
    	return newPoints;
    }
    
    
    class MyListener extends WindowAdapter
    {
      public void windowClosing(WindowEvent e)
        {
          System.exit(1);
        }
    }


    //偵測當前滑鼠的動作，並做出先對應的操作
    class MouseMotion extends MouseMotionAdapter
    {
        public void mouseMoved(MouseEvent e){
      	  //label.setText("嘗試使用滑鼠一筆畫畫出0~9的任意一個數字");
      	  isFirst = true;
      	  if(count != 0 ) {
      		    

      		        		    
      		   
      		    if(count != -1) {     
      		    //Step1
      		      ArrayList<Point> temp1 = resample(list,count,100);
      		      
      		          int c1 =0;
        		      for(Point l : temp1) {
              		    c1++;
              	  }
      		       
      		      
        		      //Call Step2
      		          ArrayList<Point> temp2 = rotateBy(temp1,c1);    
      		          //Call Step3
        		      ArrayList<Point> temp3 = scaleTo(temp2,c1,250);
        		      ArrayList<Point> temp4 = translateTo(temp3,c1);
        		      
          		      //Call Step4
        		      int result = recognize(temp4,ts,c1);
        		      if(!java.lang.Double.isNaN(temp4.get(0).y)) {
        		         label.setText("判定結果: "+ result);
        		      }else {
        		    	label.setText("判定結果: "+ 1);
        		      }
        		      
        		      
      		    }
      		        		    
      		        		    
      	      count = 0;
      	      list = new ArrayList<Point>();
      	      for(int i=0 ; i<1000 ;i++) {
      	    	 Point p = new Point(); 
      	    	 list.add(p);
      	     }
      	  }
      	  
        }
        public void mouseDragged(MouseEvent e){ 
  	      if(count < 1000 ) {
  	         x = e.getX();
  	         y = e.getY();

  	         list.get(count).x = x;
  	         list.get(count).y = y;

  	         count++;
  	         label.setText("滑鼠拖曳座標：(" + x + "," + y + ")" );
  	         repaint();
  	      }
        }
     }

     public void paint(Graphics g)
     {
  	  if(isFirst) {
  	    g.clearRect(0, 0, 800, 600);
  	    isFirst = false;
  	  }	  
        g.setColor(Color.red);
        g.fillOval(x,y,5,5);
        label.repaint();      
     }
}